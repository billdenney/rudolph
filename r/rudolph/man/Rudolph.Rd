% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rudolph.r
\docType{package}
\name{Rudolph}
\alias{Rudolph}
\alias{Rudolph-package}
\title{Rudolph: A package for generating abstract syntax trees (ASTs) from compiled
ANTLR grammar.}
\description{
The Rudolph package is a light wrapper around a simple implementation of the
ANTLR Java library. This package allows users to generate compiled ANTLR
parsers and lexers and process a character vector into an AST using the
compiled files.
}
\details{
For more details on ANTLR, see \url{https://github.com/antlr/antlr4}.
}
\section{Classes}{

This package provides 2 S4 classes: Elf and Rudolph. Elf is a helper class
responsible for generating and compiling parser and lexer files given a .g4
grammar file. Rudolph is the main class responsible for generating the AST
given a character vector and the compiled parser and lexer files.

Most use cases will not require the use of Elf. However, if using both Elf
and Rudolph, both should be given the same grammar file. The generated
compiled files in the destination directory in Elf should also be the same
files contained in the source directory in Rudolph.

Note that due to the relationship between JVMs and working directories, the
working directory will be set to the given directory in either constructor.
}

\section{Elf functions}{

Elf     : Initialization function. Takes in a .g4 grammar file and a
destination directory.

generate: Generates the parser and lexer Java files.

compile : Compiles the parser and lexer Java files.
}

\section{Rudolph functions}{

Rudolph      : Initialization function. Takes in a .g4 grammar file, a source
directory, and a root node of the grammar.

getAST       : Given a character vector, returns an AST in nested list
format.

grammarLookup: Given a grammar rule, returns the grammar rule definition.
}

\section{AST format}{

The generated AST will be in the following format:
}

\examples{
\dontrun{
ast <- list(
	type  = "parser",
	name  = "grammar rule name",
	value = list(
		list(
			type  = "lexer",
			name  = "grammar rule name 1",
			value = "grammar rule matched text 1"
		),
		list(
			type  = "lexer",
			name  = "grammar rule name 2",
			value = "grammar rule matched text 2"
		),
	)
)
}

}
